<%@ CodeTemplate Language="C#" %>
<%@ ReferenceAssembly Path="System.dll" %>
<%@ ReferenceAssembly Path="System.Data.dll" %>
<%@ ReferenceAssembly Path="DatabaseCatalogReader.dll" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="DatabaseCatalogReader" %>
<%@ Import Namespace="System.Data" %>
<%

   SqlTable cat = new SqlTable();
    if(!cat.IsConnected())
        throw new ApplicationException("No connection to database");
%>
<%
string newline = "\n\t\t\t";
string regSvcInIOC = string.Empty;
string regRepoInIOC = string.Empty;

foreach(SqlTable table in cat.GetSqlTables()){
    
    regSvcInIOC += "builder.RegisterType<"+table.Name+"Repository>().As<I"+table.Name+"Repository>();"+newline;
    regRepoInIOC += "builder.RegisterType<"+table.Name+"Service>().As<I"+table.Name+"Service>();"+newline;
    
    this.Host.CallTemplateToFile(
    "Service.cst",
    table.Name + "Service.svc",
        table
    );
}
%>
using Autofac;
using Business.Services;
using Business.Services.Contracts;
using Data.Core.Infrastructure;
using Data.Core.Repositories;

namespace WCF.Service
{
    public static class Bootstrapper
    {
        /// <summary>
        /// Configures and builds Autofac IOC container.
        /// </summary>
        /// <returns></returns>
        public static IContainer BuildContainer()
        {
            var builder = new ContainerBuilder();

            // register UnitOfWork
            builder.RegisterType<UnitOfWork>().As<IUnitOfWork>();
            builder.RegisterType<DbFactory>().As<IDbFactory>();
            
            // register services            
            builder.RegisterType<BlogService>().As<IBlogService>();
            builder.RegisterType<ArticleService>().As<IArticleService>();
            builder.RegisterType<UserService>().As<IUserService>();

            <%= regSvcInIOC %>

            // register repositories
            builder.RegisterType<ArticleRepository>().As<IArticleRepository>();
            builder.RegisterType<BlogRepository>().As<IBlogRepository>();
            
            <%= regRepoInIOC %>

            // build container
            return builder.Build();
        }
    }
}