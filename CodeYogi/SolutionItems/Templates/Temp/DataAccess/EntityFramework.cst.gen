

namespace Arebis.DynamicAssembly
{
	[Arebis.CodeGeneration.TemplateInfo(@"D:\Yogeesha\Handy Tools\Code Generation\ArebisCGenSource12\CGen\bin\Debug\Input\DataAccess\EntityFramework.cst")]
	public sealed partial class EntityFramework_cst : Arebis.CodeGeneration.CodeTemplate
	{


		public EntityFramework_cst(Arebis.CodeGeneration.IGenerationHost _host)
			: base(_host)
		{

		}
		
		public override void Generate()
		{
#line 1 "D:\Yogeesha\Handy Tools\Code Generation\ArebisCGenSource12\CGen\bin\Debug\Input\DataAccess\EntityFramework.cst"
this.WriteObjects("<#@ template debug=\"true\" hostspecific=\"true\" language=\"C#\" #>\r\n");
this.WriteObjects("<#@ include file=\"EF.Utility.CS.ttinclude\"#>\r\n");
this.WriteObjects("<#@ import namespace=\"System.IO\" #>\r\n");
this.WriteObjects("<#@ output extension=\".cs\" #>\r\n");
this.WriteObjects("<#         \r\n");
this.WriteObjects("if(Errors.HasErrors)\r\n");
this.WriteObjects("{\r\n");
this.WriteObjects("    return String.Empty;\r\n");
this.WriteObjects("}\r\n");
this.WriteObjects("\r\n");
this.WriteObjects("CodeGenerationTools code = new CodeGenerationTools(this)\r\n");
this.WriteObjects("	{FullyQualifySystemTypes = true, CamelCaseFields = false};\r\n");
this.WriteObjects("MetadataLoader loader = new MetadataLoader(this);\r\n");
this.WriteObjects("\r\n");
this.WriteObjects("string open = \"<\";\r\n");
this.WriteObjects("string close = \">\";\r\n");
this.WriteObjects("string SourceCsdlPath = FindEDMXFileName();\r\n");
this.WriteObjects("ReferenceCsdlPaths = new string[] {};\r\n");
this.WriteObjects("string namespaceName = code.VsNamespaceSuggestion();\r\n");
this.WriteObjects("ItemCollection = loader.CreateEdmItemCollection\r\n");
this.WriteObjects("	(SourceCsdlPath, ReferenceCsdlPaths.ToArray());\r\n");
this.WriteObjects("EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();\r\n");
this.WriteObjects("#>\r\n");
this.WriteObjects("using System;\r\n");
this.WriteObjects("using System.Collections.Generic;\r\n");
this.WriteObjects("using System.Data.Objects;\r\n");
this.WriteObjects("using System.Linq;\r\n");
this.WriteObjects("using System.Text;\r\n");
this.WriteObjects("using System.Linq.Expressions;\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("namespace <#=namespaceName#>\r\n");
this.WriteObjects("{\r\n");
this.WriteObjects("    public interface IRepository<T> where T : class\r\n");
this.WriteObjects("    {    \r\n");
this.WriteObjects("        #region    Methods\r\n");
this.WriteObjects("    \r\n");
this.WriteObjects("        T GetById(int id);\r\n");
this.WriteObjects("        IEnumerable<T> GetAll();\r\n");
this.WriteObjects("        IEnumerable<T> Query(Expression<Func<T, bool>> filter);        \r\n");
this.WriteObjects("        void Add(T entity);\r\n");
this.WriteObjects("        void Remove(T entity);   \r\n");
this.WriteObjects("        \r\n");
this.WriteObjects("        #endregion\r\n");
this.WriteObjects("    }\r\n");
this.WriteObjects("    \r\n");
this.WriteObjects("    public abstract class Repository<T> : IRepository<T>\r\n");
this.WriteObjects("                                  where T : class\r\n");
this.WriteObjects("    {\r\n");
this.WriteObjects("        #region Members\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        protected IObjectSet<T> _objectSet;\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        #endregion\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        #region Ctor\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        public Repository(ObjectContext context)\r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("              _objectSet = context.CreateObjectSet<T>();\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects("\r\n");
this.WriteObjects("        #endregion\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        #region IRepository<T> Members\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        public IEnumerable<T> GetAll()\r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("              return _objectSet;\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        public abstract T GetById(int id);\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        public IEnumerable<T> Query(Expression<Func<T, bool>> filter)\r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("              return _objectSet.Where(filter);\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        public void Add(T entity)\r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("              _objectSet.AddObject(entity);\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        public void Remove(T entity)\r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("              _objectSet.DeleteObject(entity);\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        #endregion\r\n");
this.WriteObjects("      }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("<#\r\n");
this.WriteObjects("    foreach (EntityType entity in \r\n");
this.WriteObjects("	ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))\r\n");
this.WriteObjects("    {        \r\n");
this.WriteObjects("#>\r\n");
this.WriteObjects("    \r\n");
this.WriteObjects("    public partial class <#= entity.Name #>Repository : \r\n");
this.WriteObjects("		Repository<#=open#><#=entity.Name#><#=close#>\r\n");
this.WriteObjects("    {\r\n");
this.WriteObjects("        #region Ctor\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        public <#= entity.Name #>Repository(ObjectContext context)\r\n");
this.WriteObjects("               : base(context)\r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        #endregion\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        #region Methods\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        public override <#= entity.Name #> GetById(int id)   \r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("            return _objectSet.SingleOrDefault(e => e.<#= \r\n");
this.WriteObjects("		entity.KeyMembers.First().Name #> == id);\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        #endregion        \r\n");
this.WriteObjects("    }\r\n");
this.WriteObjects("<# \r\n");
this.WriteObjects("    }        \r\n");
this.WriteObjects("#>\r\n");
this.WriteObjects("        \r\n");
this.WriteObjects("  public interface IUnitOfWork\r\n");
this.WriteObjects("  {\r\n");
this.WriteObjects("      #region    Methods\r\n");
this.WriteObjects("    \r\n");
this.WriteObjects("    <#\r\n");
this.WriteObjects("        foreach (EntitySet set in container.BaseEntitySets.OfType<EntitySet>())\r\n");
this.WriteObjects("        {    \r\n");
this.WriteObjects("    #>\r\n");
this.WriteObjects("        IRepository<#= open #><#= set.ElementType.Name #><#= close #> \r\n");
this.WriteObjects("		<#= set.Name #> { get; }   \r\n");
this.WriteObjects("    <# \r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects("    #>\r\n");
this.WriteObjects("    void Commit();\r\n");
this.WriteObjects("    \r\n");
this.WriteObjects("    #endregion\r\n");
this.WriteObjects("  }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("  public partial class UnitOfWork : IUnitOfWork\r\n");
this.WriteObjects("  {\r\n");
this.WriteObjects("    #region Members\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("    private readonly ObjectContext _context;\r\n");
this.WriteObjects("    <#\r\n");
this.WriteObjects("        foreach (EntitySet set in container.BaseEntitySets.OfType<EntitySet>())\r\n");
this.WriteObjects("        {    \r\n");
this.WriteObjects("    #>\r\n");
this.WriteObjects("    private <#= set.ElementType.Name #>Repository _<#= set.Name.ToLower() #>;\r\n");
this.WriteObjects("    <# \r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects("    #>    \r\n");
this.WriteObjects("    #endregion\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("    #region Ctor\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("    public UnitOfWork(ObjectContext context)\r\n");
this.WriteObjects("    {\r\n");
this.WriteObjects("      if (context == null)\r\n");
this.WriteObjects("      {\r\n");
this.WriteObjects("        throw new ArgumentNullException(\"context wasn't supplied\");\r\n");
this.WriteObjects("      }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("      _context = context;\r\n");
this.WriteObjects("    }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("    #endregion\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("    #region IUnitOfWork Members\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("    <#\r\n");
this.WriteObjects("        foreach (EntitySet set in container.BaseEntitySets.OfType<EntitySet>())\r\n");
this.WriteObjects("        {    \r\n");
this.WriteObjects("    #>\r\n");
this.WriteObjects("    public IRepository<#= open #><#= set.ElementType.Name #><#= close #> <#= set.Name #>\r\n");
this.WriteObjects("    {\r\n");
this.WriteObjects("        get\r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("            if (_<#= set.Name.ToLower() #> == null)\r\n");
this.WriteObjects("            {\r\n");
this.WriteObjects("                _<#= set.Name.ToLower() #> = new <#= \r\n");
this.WriteObjects("		set.ElementType.Name #>Repository(_context);\r\n");
this.WriteObjects("            }\r\n");
this.WriteObjects("            return _<#= set.Name.ToLower() #>;\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects("    }\r\n");
this.WriteObjects("    <# \r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects("    #>    \r\n");
this.WriteObjects("    \r\n");
this.WriteObjects("    public void Commit()\r\n");
this.WriteObjects("    {\r\n");
this.WriteObjects("      _context.SaveChanges();\r\n");
this.WriteObjects("    }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("    #endregion\r\n");
this.WriteObjects("  }\r\n");
this.WriteObjects("}\r\n");
this.WriteObjects("<#+\r\n");
this.WriteObjects("public string SourceCsdlPath{ get; set; }\r\n");
this.WriteObjects("public EdmItemCollection ItemCollection{ get; set; }\r\n");
this.WriteObjects("public IEnumerable<string> ReferenceCsdlPaths{ get; set; }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("string FindEDMXFileName()\r\n");
this.WriteObjects("{            \r\n");
this.WriteObjects("    string[] entityFrameworkFiles = Directory.GetFiles\r\n");
this.WriteObjects("		(Host.ResolvePath(string.Empty), \"*.edmx\");\r\n");
this.WriteObjects("    if(entityFrameworkFiles.Length > 0)\r\n");
this.WriteObjects("    {\r\n");
this.WriteObjects("        return entityFrameworkFiles[0];\r\n");
this.WriteObjects("    }\r\n");
this.WriteObjects("    \r\n");
this.WriteObjects("    return string.Empty;\r\n");
this.WriteObjects("}\r\n");
this.WriteObjects("#>\r\n");
this.WriteObjects("And this is the generated code that I get after running the T4 Template on my testing edmx file:\r\n");
this.WriteObjects("\r\n");
this.WriteObjects("Hide   Shrink    Copy Code\r\n");
this.WriteObjects("using System;\r\n");
this.WriteObjects("using System.Collections.Generic;\r\n");
this.WriteObjects("using System.Data.Objects;\r\n");
this.WriteObjects("using System.Linq;\r\n");
this.WriteObjects("using System.Text;\r\n");
this.WriteObjects("using System.Linq.Expressions;\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("namespace ConsoleApplication1\r\n");
this.WriteObjects("{\r\n");
this.WriteObjects("    public interface IRepository<T> where T : class\r\n");
this.WriteObjects("    {    \r\n");
this.WriteObjects("        #region    Methods\r\n");
this.WriteObjects("    \r\n");
this.WriteObjects("        T GetById(int id);\r\n");
this.WriteObjects("        IEnumerable<T> GetAll();\r\n");
this.WriteObjects("        IEnumerable<T> Query(Expression<Func<T, bool>> filter);        \r\n");
this.WriteObjects("        void Add(T entity);\r\n");
this.WriteObjects("        void Remove(T entity);   \r\n");
this.WriteObjects("        \r\n");
this.WriteObjects("        #endregion\r\n");
this.WriteObjects("    }\r\n");
this.WriteObjects("    \r\n");
this.WriteObjects("    public abstract class Repository<T> : IRepository<T>\r\n");
this.WriteObjects("                                  where T : class\r\n");
this.WriteObjects("    {\r\n");
this.WriteObjects("        #region Members\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        protected IObjectSet<T> _objectSet;\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        #endregion\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        #region Ctor\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        public Repository(ObjectContext context)\r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("              _objectSet = context.CreateObjectSet<T>();\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        #endregion\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        #region IRepository<T> Members\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        public IEnumerable<T> GetAll()\r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("              return _objectSet;\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        public abstract T GetById(int id);\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        public IEnumerable<T> Query(Expression<Func<T, bool>> filter)\r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("              return _objectSet.Where(filter);\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        public void Add(T entity)\r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("              _objectSet.AddObject(entity);\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        public void Remove(T entity)\r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("              _objectSet.DeleteObject(entity);\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        #endregion\r\n");
this.WriteObjects("      }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("    public partial class CourseRepository : Repository<Course>\r\n");
this.WriteObjects("    {\r\n");
this.WriteObjects("        #region Ctor\r\n");
this.WriteObjects("\r\n");
this.WriteObjects("        public CourseRepository(ObjectContext context)\r\n");
this.WriteObjects("               : base(context)\r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        #endregion\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        #region Methods\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        public override Course GetById(int id)   \r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("            return _objectSet.SingleOrDefault(e => e.CourseID == id);\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        #endregion        \r\n");
this.WriteObjects("    }\r\n");
this.WriteObjects("    \r\n");
this.WriteObjects("    public partial class DepartmentRepository : Repository<Department>\r\n");
this.WriteObjects("    {\r\n");
this.WriteObjects("        #region Ctor\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        public DepartmentRepository(ObjectContext context)\r\n");
this.WriteObjects("               : base(context)\r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        #endregion\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        #region Methods\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        public override Department GetById(int id)   \r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("            return _objectSet.SingleOrDefault(e => e.DepartmentID == id);\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        #endregion        \r\n");
this.WriteObjects("    }\r\n");
this.WriteObjects("    \r\n");
this.WriteObjects("    public partial class EnrollmentRepository : Repository<Enrollment>\r\n");
this.WriteObjects("    {\r\n");
this.WriteObjects("        #region Ctor\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        public EnrollmentRepository(ObjectContext context)\r\n");
this.WriteObjects("               : base(context)\r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        #endregion\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        #region Methods\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        public override Enrollment GetById(int id)   \r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("            return _objectSet.SingleOrDefault(e => e.EnrollmentID == id);\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        #endregion        \r\n");
this.WriteObjects("    }\r\n");
this.WriteObjects("    \r\n");
this.WriteObjects("    public partial class PersonRepository : Repository<Person>\r\n");
this.WriteObjects("    {\r\n");
this.WriteObjects("        #region Ctor\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        public PersonRepository(ObjectContext context)\r\n");
this.WriteObjects("               : base(context)\r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        #endregion\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        #region Methods\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        public override Person GetById(int id)   \r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("            return _objectSet.SingleOrDefault(e => e.PersonID == id);\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        #endregion        \r\n");
this.WriteObjects("    }\r\n");
this.WriteObjects("        \r\n");
this.WriteObjects("  public interface IUnitOfWork\r\n");
this.WriteObjects("  {\r\n");
this.WriteObjects("      #region    Methods\r\n");
this.WriteObjects("    \r\n");
this.WriteObjects("            IRepository<Course> Courses { get; }   \r\n");
this.WriteObjects("            IRepository<Department> Departments { get; }   \r\n");
this.WriteObjects("            IRepository<Enrollment> Enrollments { get; }   \r\n");
this.WriteObjects("            IRepository<Person> People { get; }   \r\n");
this.WriteObjects("        void Commit();\r\n");
this.WriteObjects("    \r\n");
this.WriteObjects("    #endregion\r\n");
this.WriteObjects("  }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("  public partial class UnitOfWork\r\n");
this.WriteObjects("  {\r\n");
this.WriteObjects("    #region Members\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("    private readonly ObjectContext _context;\r\n");
this.WriteObjects("        private CourseRepository _courses;\r\n");
this.WriteObjects("        private DepartmentRepository _departments;\r\n");
this.WriteObjects("        private EnrollmentRepository _enrollments;\r\n");
this.WriteObjects("        private PersonRepository _people;\r\n");
this.WriteObjects("        \r\n");
this.WriteObjects("    #endregion\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("    #region Ctor\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("    public UnitOfWork(ObjectContext context)\r\n");
this.WriteObjects("    {\r\n");
this.WriteObjects("      if (context == null)\r\n");
this.WriteObjects("      {\r\n");
this.WriteObjects("        throw new ArgumentNullException(\"context wasn't supplied\");\r\n");
this.WriteObjects("      }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("      _context = context;\r\n");
this.WriteObjects("    }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("    #endregion\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("    #region IUnitOfWork Members\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("        public IRepository<Course> Courses\r\n");
this.WriteObjects("    {\r\n");
this.WriteObjects("        get\r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("            if (_courses == null)\r\n");
this.WriteObjects("            {\r\n");
this.WriteObjects("                _courses = new CourseRepository(_context);\r\n");
this.WriteObjects("            }\r\n");
this.WriteObjects("            return _courses;\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects("    }\r\n");
this.WriteObjects("        public IRepository<Department> Departments\r\n");
this.WriteObjects("    {\r\n");
this.WriteObjects("        get\r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("            if (_departments == null)\r\n");
this.WriteObjects("            {\r\n");
this.WriteObjects("                _departments = new DepartmentRepository(_context);\r\n");
this.WriteObjects("            }\r\n");
this.WriteObjects("            return _departments;\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects("    }\r\n");
this.WriteObjects("        public IRepository<Enrollment> Enrollments\r\n");
this.WriteObjects("    {\r\n");
this.WriteObjects("        get\r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("            if (_enrollments == null)\r\n");
this.WriteObjects("            {\r\n");
this.WriteObjects("                _enrollments = new EnrollmentRepository(_context);\r\n");
this.WriteObjects("            }\r\n");
this.WriteObjects("            return _enrollments;\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects("    }\r\n");
this.WriteObjects("        public IRepository<Person> People\r\n");
this.WriteObjects("    {\r\n");
this.WriteObjects("        get\r\n");
this.WriteObjects("        {\r\n");
this.WriteObjects("            if (_people == null)\r\n");
this.WriteObjects("            {\r\n");
this.WriteObjects("                _people = new PersonRepository(_context);\r\n");
this.WriteObjects("            }\r\n");
this.WriteObjects("            return _people;\r\n");
this.WriteObjects("        }\r\n");
this.WriteObjects("    }\r\n");
this.WriteObjects("            \r\n");
this.WriteObjects("    public void Commit()\r\n");
this.WriteObjects("    {\r\n");
this.WriteObjects("      _context.SaveChanges();\r\n");
this.WriteObjects("    }\r\n");
this.WriteObjects(" \r\n");
this.WriteObjects("    #endregion\r\n");
this.WriteObjects("  }\r\n");
this.WriteObjects("}");

		}



	}
}